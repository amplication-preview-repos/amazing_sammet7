/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProjectReference as PrismaProjectReference,
  BusinessLine as PrismaBusinessLine,
  ProjectType as PrismaProjectType,
} from "@prisma/client";

export class ProjectReferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectReferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectReference.count(args);
  }

  async projectReferences(
    args: Prisma.ProjectReferenceFindManyArgs
  ): Promise<PrismaProjectReference[]> {
    return this.prisma.projectReference.findMany(args);
  }
  async projectReference(
    args: Prisma.ProjectReferenceFindUniqueArgs
  ): Promise<PrismaProjectReference | null> {
    return this.prisma.projectReference.findUnique(args);
  }
  async createProjectReference(
    args: Prisma.ProjectReferenceCreateArgs
  ): Promise<PrismaProjectReference> {
    return this.prisma.projectReference.create(args);
  }
  async updateProjectReference(
    args: Prisma.ProjectReferenceUpdateArgs
  ): Promise<PrismaProjectReference> {
    return this.prisma.projectReference.update(args);
  }
  async deleteProjectReference(
    args: Prisma.ProjectReferenceDeleteArgs
  ): Promise<PrismaProjectReference> {
    return this.prisma.projectReference.delete(args);
  }

  async getBusinessLine(parentId: string): Promise<PrismaBusinessLine | null> {
    return this.prisma.projectReference
      .findUnique({
        where: { id: parentId },
      })
      .businessLine();
  }

  async getProjectType(parentId: string): Promise<PrismaProjectType | null> {
    return this.prisma.projectReference
      .findUnique({
        where: { id: parentId },
      })
      .projectType();
  }
}
