/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProjectReference } from "./ProjectReference";
import { ProjectReferenceCountArgs } from "./ProjectReferenceCountArgs";
import { ProjectReferenceFindManyArgs } from "./ProjectReferenceFindManyArgs";
import { ProjectReferenceFindUniqueArgs } from "./ProjectReferenceFindUniqueArgs";
import { CreateProjectReferenceArgs } from "./CreateProjectReferenceArgs";
import { UpdateProjectReferenceArgs } from "./UpdateProjectReferenceArgs";
import { DeleteProjectReferenceArgs } from "./DeleteProjectReferenceArgs";
import { BusinessLine } from "../../businessLine/base/BusinessLine";
import { ProjectType } from "../../projectType/base/ProjectType";
import { ProjectReferenceService } from "../projectReference.service";
@graphql.Resolver(() => ProjectReference)
export class ProjectReferenceResolverBase {
  constructor(protected readonly service: ProjectReferenceService) {}

  async _projectReferencesMeta(
    @graphql.Args() args: ProjectReferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProjectReference])
  async projectReferences(
    @graphql.Args() args: ProjectReferenceFindManyArgs
  ): Promise<ProjectReference[]> {
    return this.service.projectReferences(args);
  }

  @graphql.Query(() => ProjectReference, { nullable: true })
  async projectReference(
    @graphql.Args() args: ProjectReferenceFindUniqueArgs
  ): Promise<ProjectReference | null> {
    const result = await this.service.projectReference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProjectReference)
  async createProjectReference(
    @graphql.Args() args: CreateProjectReferenceArgs
  ): Promise<ProjectReference> {
    return await this.service.createProjectReference({
      ...args,
      data: {
        ...args.data,

        businessLine: args.data.businessLine
          ? {
              connect: args.data.businessLine,
            }
          : undefined,

        projectType: args.data.projectType
          ? {
              connect: args.data.projectType,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProjectReference)
  async updateProjectReference(
    @graphql.Args() args: UpdateProjectReferenceArgs
  ): Promise<ProjectReference | null> {
    try {
      return await this.service.updateProjectReference({
        ...args,
        data: {
          ...args.data,

          businessLine: args.data.businessLine
            ? {
                connect: args.data.businessLine,
              }
            : undefined,

          projectType: args.data.projectType
            ? {
                connect: args.data.projectType,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectReference)
  async deleteProjectReference(
    @graphql.Args() args: DeleteProjectReferenceArgs
  ): Promise<ProjectReference | null> {
    try {
      return await this.service.deleteProjectReference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => BusinessLine, {
    nullable: true,
    name: "businessLine",
  })
  async getBusinessLine(
    @graphql.Parent() parent: ProjectReference
  ): Promise<BusinessLine | null> {
    const result = await this.service.getBusinessLine(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => ProjectType, {
    nullable: true,
    name: "projectType",
  })
  async getProjectType(
    @graphql.Parent() parent: ProjectReference
  ): Promise<ProjectType | null> {
    const result = await this.service.getProjectType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
