/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectReferenceService } from "../projectReference.service";
import { ProjectReferenceCreateInput } from "./ProjectReferenceCreateInput";
import { ProjectReference } from "./ProjectReference";
import { ProjectReferenceFindManyArgs } from "./ProjectReferenceFindManyArgs";
import { ProjectReferenceWhereUniqueInput } from "./ProjectReferenceWhereUniqueInput";
import { ProjectReferenceUpdateInput } from "./ProjectReferenceUpdateInput";

export class ProjectReferenceControllerBase {
  constructor(protected readonly service: ProjectReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectReference })
  async createProjectReference(
    @common.Body() data: ProjectReferenceCreateInput
  ): Promise<ProjectReference> {
    return await this.service.createProjectReference({
      data: {
        ...data,

        businessLine: data.businessLine
          ? {
              connect: data.businessLine,
            }
          : undefined,

        projectType: data.projectType
          ? {
              connect: data.projectType,
            }
          : undefined,
      },
      select: {
        businessLine: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        projectManager: true,
        projectName: true,
        projectPrice: true,

        projectType: {
          select: {
            id: true,
          },
        },

        responsiblePerson: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectReference] })
  @ApiNestedQuery(ProjectReferenceFindManyArgs)
  async projectReferences(
    @common.Req() request: Request
  ): Promise<ProjectReference[]> {
    const args = plainToClass(ProjectReferenceFindManyArgs, request.query);
    return this.service.projectReferences({
      ...args,
      select: {
        businessLine: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        projectManager: true,
        projectName: true,
        projectPrice: true,

        projectType: {
          select: {
            id: true,
          },
        },

        responsiblePerson: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectReference(
    @common.Param() params: ProjectReferenceWhereUniqueInput
  ): Promise<ProjectReference | null> {
    const result = await this.service.projectReference({
      where: params,
      select: {
        businessLine: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        projectManager: true,
        projectName: true,
        projectPrice: true,

        projectType: {
          select: {
            id: true,
          },
        },

        responsiblePerson: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectReference(
    @common.Param() params: ProjectReferenceWhereUniqueInput,
    @common.Body() data: ProjectReferenceUpdateInput
  ): Promise<ProjectReference | null> {
    try {
      return await this.service.updateProjectReference({
        where: params,
        data: {
          ...data,

          businessLine: data.businessLine
            ? {
                connect: data.businessLine,
              }
            : undefined,

          projectType: data.projectType
            ? {
                connect: data.projectType,
              }
            : undefined,
        },
        select: {
          businessLine: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endDate: true,
          id: true,
          projectManager: true,
          projectName: true,
          projectPrice: true,

          projectType: {
            select: {
              id: true,
            },
          },

          responsiblePerson: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectReference(
    @common.Param() params: ProjectReferenceWhereUniqueInput
  ): Promise<ProjectReference | null> {
    try {
      return await this.service.deleteProjectReference({
        where: params,
        select: {
          businessLine: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          endDate: true,
          id: true,
          projectManager: true,
          projectName: true,
          projectPrice: true,

          projectType: {
            select: {
              id: true,
            },
          },

          responsiblePerson: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
