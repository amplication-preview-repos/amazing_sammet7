/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectTypeService } from "../projectType.service";
import { ProjectTypeCreateInput } from "./ProjectTypeCreateInput";
import { ProjectType } from "./ProjectType";
import { ProjectTypeFindManyArgs } from "./ProjectTypeFindManyArgs";
import { ProjectTypeWhereUniqueInput } from "./ProjectTypeWhereUniqueInput";
import { ProjectTypeUpdateInput } from "./ProjectTypeUpdateInput";
import { ProjectReferenceFindManyArgs } from "../../projectReference/base/ProjectReferenceFindManyArgs";
import { ProjectReference } from "../../projectReference/base/ProjectReference";
import { ProjectReferenceWhereUniqueInput } from "../../projectReference/base/ProjectReferenceWhereUniqueInput";

export class ProjectTypeControllerBase {
  constructor(protected readonly service: ProjectTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectType })
  async createProjectType(
    @common.Body() data: ProjectTypeCreateInput
  ): Promise<ProjectType> {
    return await this.service.createProjectType({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectType] })
  @ApiNestedQuery(ProjectTypeFindManyArgs)
  async projectTypes(@common.Req() request: Request): Promise<ProjectType[]> {
    const args = plainToClass(ProjectTypeFindManyArgs, request.query);
    return this.service.projectTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectType(
    @common.Param() params: ProjectTypeWhereUniqueInput
  ): Promise<ProjectType | null> {
    const result = await this.service.projectType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectType(
    @common.Param() params: ProjectTypeWhereUniqueInput,
    @common.Body() data: ProjectTypeUpdateInput
  ): Promise<ProjectType | null> {
    try {
      return await this.service.updateProjectType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectType(
    @common.Param() params: ProjectTypeWhereUniqueInput
  ): Promise<ProjectType | null> {
    try {
      return await this.service.deleteProjectType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/projectReferences")
  @ApiNestedQuery(ProjectReferenceFindManyArgs)
  async findProjectReferences(
    @common.Req() request: Request,
    @common.Param() params: ProjectTypeWhereUniqueInput
  ): Promise<ProjectReference[]> {
    const query = plainToClass(ProjectReferenceFindManyArgs, request.query);
    const results = await this.service.findProjectReferences(params.id, {
      ...query,
      select: {
        businessLine: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        projectManager: true,
        projectName: true,
        projectPrice: true,

        projectType: {
          select: {
            id: true,
          },
        },

        responsiblePerson: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projectReferences")
  async connectProjectReferences(
    @common.Param() params: ProjectTypeWhereUniqueInput,
    @common.Body() body: ProjectReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectReferences: {
        connect: body,
      },
    };
    await this.service.updateProjectType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projectReferences")
  async updateProjectReferences(
    @common.Param() params: ProjectTypeWhereUniqueInput,
    @common.Body() body: ProjectReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectReferences: {
        set: body,
      },
    };
    await this.service.updateProjectType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projectReferences")
  async disconnectProjectReferences(
    @common.Param() params: ProjectTypeWhereUniqueInput,
    @common.Body() body: ProjectReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectReferences: {
        disconnect: body,
      },
    };
    await this.service.updateProjectType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
