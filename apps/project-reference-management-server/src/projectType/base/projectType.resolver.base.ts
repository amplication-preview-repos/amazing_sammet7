/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProjectType } from "./ProjectType";
import { ProjectTypeCountArgs } from "./ProjectTypeCountArgs";
import { ProjectTypeFindManyArgs } from "./ProjectTypeFindManyArgs";
import { ProjectTypeFindUniqueArgs } from "./ProjectTypeFindUniqueArgs";
import { CreateProjectTypeArgs } from "./CreateProjectTypeArgs";
import { UpdateProjectTypeArgs } from "./UpdateProjectTypeArgs";
import { DeleteProjectTypeArgs } from "./DeleteProjectTypeArgs";
import { ProjectReferenceFindManyArgs } from "../../projectReference/base/ProjectReferenceFindManyArgs";
import { ProjectReference } from "../../projectReference/base/ProjectReference";
import { ProjectTypeService } from "../projectType.service";
@graphql.Resolver(() => ProjectType)
export class ProjectTypeResolverBase {
  constructor(protected readonly service: ProjectTypeService) {}

  async _projectTypesMeta(
    @graphql.Args() args: ProjectTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProjectType])
  async projectTypes(
    @graphql.Args() args: ProjectTypeFindManyArgs
  ): Promise<ProjectType[]> {
    return this.service.projectTypes(args);
  }

  @graphql.Query(() => ProjectType, { nullable: true })
  async projectType(
    @graphql.Args() args: ProjectTypeFindUniqueArgs
  ): Promise<ProjectType | null> {
    const result = await this.service.projectType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProjectType)
  async createProjectType(
    @graphql.Args() args: CreateProjectTypeArgs
  ): Promise<ProjectType> {
    return await this.service.createProjectType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProjectType)
  async updateProjectType(
    @graphql.Args() args: UpdateProjectTypeArgs
  ): Promise<ProjectType | null> {
    try {
      return await this.service.updateProjectType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectType)
  async deleteProjectType(
    @graphql.Args() args: DeleteProjectTypeArgs
  ): Promise<ProjectType | null> {
    try {
      return await this.service.deleteProjectType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ProjectReference], { name: "projectReferences" })
  async findProjectReferences(
    @graphql.Parent() parent: ProjectType,
    @graphql.Args() args: ProjectReferenceFindManyArgs
  ): Promise<ProjectReference[]> {
    const results = await this.service.findProjectReferences(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
