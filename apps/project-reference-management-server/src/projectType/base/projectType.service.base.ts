/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProjectType as PrismaProjectType,
  ProjectReference as PrismaProjectReference,
} from "@prisma/client";

export class ProjectTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectType.count(args);
  }

  async projectTypes(
    args: Prisma.ProjectTypeFindManyArgs
  ): Promise<PrismaProjectType[]> {
    return this.prisma.projectType.findMany(args);
  }
  async projectType(
    args: Prisma.ProjectTypeFindUniqueArgs
  ): Promise<PrismaProjectType | null> {
    return this.prisma.projectType.findUnique(args);
  }
  async createProjectType(
    args: Prisma.ProjectTypeCreateArgs
  ): Promise<PrismaProjectType> {
    return this.prisma.projectType.create(args);
  }
  async updateProjectType(
    args: Prisma.ProjectTypeUpdateArgs
  ): Promise<PrismaProjectType> {
    return this.prisma.projectType.update(args);
  }
  async deleteProjectType(
    args: Prisma.ProjectTypeDeleteArgs
  ): Promise<PrismaProjectType> {
    return this.prisma.projectType.delete(args);
  }

  async findProjectReferences(
    parentId: string,
    args: Prisma.ProjectReferenceFindManyArgs
  ): Promise<PrismaProjectReference[]> {
    return this.prisma.projectType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projectReferences(args);
  }
}
