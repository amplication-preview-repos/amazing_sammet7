/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BusinessLine as PrismaBusinessLine,
  ProjectReference as PrismaProjectReference,
} from "@prisma/client";

export class BusinessLineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BusinessLineCountArgs, "select">
  ): Promise<number> {
    return this.prisma.businessLine.count(args);
  }

  async businessLines(
    args: Prisma.BusinessLineFindManyArgs
  ): Promise<PrismaBusinessLine[]> {
    return this.prisma.businessLine.findMany(args);
  }
  async businessLine(
    args: Prisma.BusinessLineFindUniqueArgs
  ): Promise<PrismaBusinessLine | null> {
    return this.prisma.businessLine.findUnique(args);
  }
  async createBusinessLine(
    args: Prisma.BusinessLineCreateArgs
  ): Promise<PrismaBusinessLine> {
    return this.prisma.businessLine.create(args);
  }
  async updateBusinessLine(
    args: Prisma.BusinessLineUpdateArgs
  ): Promise<PrismaBusinessLine> {
    return this.prisma.businessLine.update(args);
  }
  async deleteBusinessLine(
    args: Prisma.BusinessLineDeleteArgs
  ): Promise<PrismaBusinessLine> {
    return this.prisma.businessLine.delete(args);
  }

  async findProjectReferences(
    parentId: string,
    args: Prisma.ProjectReferenceFindManyArgs
  ): Promise<PrismaProjectReference[]> {
    return this.prisma.businessLine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projectReferences(args);
  }
}
