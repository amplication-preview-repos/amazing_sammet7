/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BusinessLine } from "./BusinessLine";
import { BusinessLineCountArgs } from "./BusinessLineCountArgs";
import { BusinessLineFindManyArgs } from "./BusinessLineFindManyArgs";
import { BusinessLineFindUniqueArgs } from "./BusinessLineFindUniqueArgs";
import { CreateBusinessLineArgs } from "./CreateBusinessLineArgs";
import { UpdateBusinessLineArgs } from "./UpdateBusinessLineArgs";
import { DeleteBusinessLineArgs } from "./DeleteBusinessLineArgs";
import { ProjectReferenceFindManyArgs } from "../../projectReference/base/ProjectReferenceFindManyArgs";
import { ProjectReference } from "../../projectReference/base/ProjectReference";
import { BusinessLineService } from "../businessLine.service";
@graphql.Resolver(() => BusinessLine)
export class BusinessLineResolverBase {
  constructor(protected readonly service: BusinessLineService) {}

  async _businessLinesMeta(
    @graphql.Args() args: BusinessLineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BusinessLine])
  async businessLines(
    @graphql.Args() args: BusinessLineFindManyArgs
  ): Promise<BusinessLine[]> {
    return this.service.businessLines(args);
  }

  @graphql.Query(() => BusinessLine, { nullable: true })
  async businessLine(
    @graphql.Args() args: BusinessLineFindUniqueArgs
  ): Promise<BusinessLine | null> {
    const result = await this.service.businessLine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BusinessLine)
  async createBusinessLine(
    @graphql.Args() args: CreateBusinessLineArgs
  ): Promise<BusinessLine> {
    return await this.service.createBusinessLine({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BusinessLine)
  async updateBusinessLine(
    @graphql.Args() args: UpdateBusinessLineArgs
  ): Promise<BusinessLine | null> {
    try {
      return await this.service.updateBusinessLine({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BusinessLine)
  async deleteBusinessLine(
    @graphql.Args() args: DeleteBusinessLineArgs
  ): Promise<BusinessLine | null> {
    try {
      return await this.service.deleteBusinessLine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ProjectReference], { name: "projectReferences" })
  async findProjectReferences(
    @graphql.Parent() parent: BusinessLine,
    @graphql.Args() args: ProjectReferenceFindManyArgs
  ): Promise<ProjectReference[]> {
    const results = await this.service.findProjectReferences(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
