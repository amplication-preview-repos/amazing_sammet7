/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PeopleService } from "../people.service";
import { PeopleCreateInput } from "./PeopleCreateInput";
import { People } from "./People";
import { PeopleFindManyArgs } from "./PeopleFindManyArgs";
import { PeopleWhereUniqueInput } from "./PeopleWhereUniqueInput";
import { PeopleUpdateInput } from "./PeopleUpdateInput";

export class PeopleControllerBase {
  constructor(protected readonly service: PeopleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: People })
  async createPeople(@common.Body() data: PeopleCreateInput): Promise<People> {
    return await this.service.createPeople({
      data: data,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [People] })
  @ApiNestedQuery(PeopleFindManyArgs)
  async peopleItems(@common.Req() request: Request): Promise<People[]> {
    const args = plainToClass(PeopleFindManyArgs, request.query);
    return this.service.peopleItems({
      ...args,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: People })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async people(
    @common.Param() params: PeopleWhereUniqueInput
  ): Promise<People | null> {
    const result = await this.service.people({
      where: params,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: People })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePeople(
    @common.Param() params: PeopleWhereUniqueInput,
    @common.Body() data: PeopleUpdateInput
  ): Promise<People | null> {
    try {
      return await this.service.updatePeople({
        where: params,
        data: data,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: People })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePeople(
    @common.Param() params: PeopleWhereUniqueInput
  ): Promise<People | null> {
    try {
      return await this.service.deletePeople({
        where: params,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
