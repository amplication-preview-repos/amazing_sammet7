/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { People } from "./People";
import { PeopleCountArgs } from "./PeopleCountArgs";
import { PeopleFindManyArgs } from "./PeopleFindManyArgs";
import { PeopleFindUniqueArgs } from "./PeopleFindUniqueArgs";
import { CreatePeopleArgs } from "./CreatePeopleArgs";
import { UpdatePeopleArgs } from "./UpdatePeopleArgs";
import { DeletePeopleArgs } from "./DeletePeopleArgs";
import { PeopleService } from "../people.service";
@graphql.Resolver(() => People)
export class PeopleResolverBase {
  constructor(protected readonly service: PeopleService) {}

  async _peopleItemsMeta(
    @graphql.Args() args: PeopleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [People])
  async peopleItems(
    @graphql.Args() args: PeopleFindManyArgs
  ): Promise<People[]> {
    return this.service.peopleItems(args);
  }

  @graphql.Query(() => People, { nullable: true })
  async people(
    @graphql.Args() args: PeopleFindUniqueArgs
  ): Promise<People | null> {
    const result = await this.service.people(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => People)
  async createPeople(@graphql.Args() args: CreatePeopleArgs): Promise<People> {
    return await this.service.createPeople({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => People)
  async updatePeople(
    @graphql.Args() args: UpdatePeopleArgs
  ): Promise<People | null> {
    try {
      return await this.service.updatePeople({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => People)
  async deletePeople(
    @graphql.Args() args: DeletePeopleArgs
  ): Promise<People | null> {
    try {
      return await this.service.deletePeople(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
